from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_bcrypt import Bcrypt
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from config import Config

db = SQLAlchemy()
bcrypt = Bcrypt()
login_manager = LoginManager()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # ✅ Filtro para formatar valores em R$ (pt-BR)
    @app.template_filter('brl')
    def format_brl(value):
        try:
            return f'R$ {value:,.2f}'.replace(',', 'v').replace('.', ',').replace('v', '.')
        except:
            return 'R$ 0,00'

    # ✅ Configuração do JWT
    app.config['JWT_TOKEN_LOCATION'] = ['headers']
    app.config['JWT_HEADER_NAME'] = 'Authorization'
    app.config['JWT_HEADER_TYPE'] = 'Bearer'
    jwt = JWTManager(app)

    # ✅ Inicialização de extensões
    db.init_app(app)
    bcrypt.init_app(app)
    login_manager.init_app(app)
    migrate = Migrate(app, db)

    login_manager.login_view = "auth_bp.login"
    login_manager.login_message_category = "info"

    from app.models import Usuario, Colaborador

    @login_manager.user_loader
    def load_user(user_id):
        user = Usuario.query.get(int(user_id))
        if u:
            return u
        return Colaborador.query.get(int(user_id))

    # ✅ Registro das rotas (Blueprints)
    from app.routes.auth_routes import auth_bp
    from app.routes.dashboard_routes import dashboard_bp
    from app.routes.projeto_routes import projeto_bp
    from app.routes.empresa_routes import empresa_bp
    from app.routes.colaborador_routes import colaborador_bp
    from app.routes.relatorio_routes import relatorio_bp
    from app.routes.despesa_routes import despesa_bp
    from app.routes.user_routes import user_bp

    app.register_blueprint(auth_bp)
    app.register_blueprint(dashboard_bp)
    app.register_blueprint(projeto_bp)
    app.register_blueprint(empresa_bp)
    app.register_blueprint(colaborador_bp)
    app.register_blueprint(relatorio_bp)
    app.register_blueprint(despesa_bp)
    app.register_blueprint(user_bp)

    return app
